// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/handlers/get/ping_db.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/borismarvin/shortener_url.git/internal/app/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockStoragePinger is a mock of StoragePinger interface.
type MockStoragePinger struct {
	ctrl     *gomock.Controller
	recorder *MockStoragePingerMockRecorder
}

// MockStoragePingerMockRecorder is the mock recorder for MockStoragePinger.
type MockStoragePingerMockRecorder struct {
	mock *MockStoragePinger
}

// NewMockStoragePinger creates a new mock instance.
func NewMockStoragePinger(ctrl *gomock.Controller) *MockStoragePinger {
	mock := &MockStoragePinger{ctrl: ctrl}
	mock.recorder = &MockStoragePingerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoragePinger) EXPECT() *MockStoragePingerMockRecorder {
	return m.recorder
}

// PingServer mocks base method.
func (m *MockStoragePinger) PingServer(ctx context.Context) entity.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingServer", ctx)
	ret0, _ := ret[0].(entity.Response)
	return ret0
}

// PingServer indicates an expected call of PingServer.
func (mr *MockStoragePingerMockRecorder) PingServer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingServer", reflect.TypeOf((*MockStoragePinger)(nil).PingServer), ctx)
}
